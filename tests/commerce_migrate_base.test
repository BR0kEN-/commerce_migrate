<?php
/**
 * @file
 * Base facade for "Commerce Migrate" tests.
 */

/**
 * Class CommerceMigrateBaseTestCase.
 */
abstract class CommerceMigrateBaseTestCase extends CommerceBaseTestCase {

  /**
   * User object of a store administrator.
   *
   * @var \stdClass
   */
  private $storeAdmin;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp(parent::setUpHelper('all', static::extraModules()));
    // Make sure the migrations are registered.
    migrate_static_registration();
    // Run all test imports.
    $this->migrate('import');
  }

  /**
   * {@inheritdoc}
   */
  protected function permissionBuilder($set) {
    $permissions = parent::permissionBuilder($set);

    switch ($set) {
      case 'store admin':
      case 'site admin':
        $permissions[] = MIGRATE_ACCESS_BASIC;
        $permissions[] = MIGRATE_ACCESS_ADVANCED;
        break;
    }

    return $permissions;
  }

  /**
   * Returns list of additional modules for enable before test will be run.
   *
   * @return string[]
   *   List of module names.
   *
   * @throws \Exception
   */
  protected static function extraModules() {
    $test_class = get_called_class();

    if (!method_exists($test_class, 'getInfo')) {
      throw new \Exception(t('The "@method" is not implemented by "@test_class" test class!', array(
        '@method' => __METHOD__,
        '@test_class' => $test_class,
      )));
    }

    $info = $test_class::getInfo();
    $modules = array(
      'migrate',
      'migrate_extras',
      'commerce_migrate',
      'commerce_migrate_example',
    );

    // Prepend test dependencies.
    if (!empty($info['dependencies'])) {
      $modules = array_merge($modules, $info['dependencies']);
    }

    return $modules;
  }

  /**
   * Get user object of a store administrator.
   *
   * @return \stdClass
   *   Drupal user.
   */
  protected function getStoreAdmin() {
    if (NULL === $this->storeAdmin) {
      $this->storeAdmin = $this->createStoreAdmin();

      if (FALSE === $this->storeAdmin) {
        $this->fail(t('Failed to create Store Admin user for test.'));
      }
    }

    return $this->storeAdmin;
  }

  /**
   * Load an order by number.
   *
   * @see commerce_order_load_by_number()
   *
   * @param string $order_number
   *   Order number. See "orders.csv".
   *
   * @return \EntityDrupalWrapper
   *   Entity wrapper for commerce order.
   */
  protected function getOrder($order_number) {
    return $this->getEntityWrapper('commerce_order', 'order_number', $order_number);
  }

  /**
   * Load product by SKU.
   *
   * @see commerce_product_load_by_sku()
   *
   * @param string $sku
   *   Product SKU. See "products.csv".
   *
   * @return \EntityDrupalWrapper
   *   Entity wrapper for commerce product.
   */
  protected function getProduct($sku) {
    return $this->getEntityWrapper('commerce_product', 'sku', $sku);
  }

  /**
   * Performs migration action.
   *
   * @see \MigrationBase::processImport()
   * @see \MigrationBase::processRollback()
   *
   * @param string $action
   *   One of two possible actions: "import" or "rollback".
   *
   * @throws \Exception
   */
  protected function migrate($action) {
    $action = ucfirst($action);
    $method = "process$action";

    if (!method_exists('MigrationBase', $method)) {
      throw new \Exception(t('Wrong action! Read documentation for "@method" method!', array(
        '@method' => __METHOD__,
      )));
    }

    $info = module_invoke('commerce_migrate_example', 'migrate_api');

    // Rollback should be in a reverse order.
    if ('Rollback' === $action) {
      $info['migrations'] = array_reverse($info['migrations']);
    }

    foreach ($info['migrations'] as $migration => $definition) {
      $this->assertEqual(
        \Migration::getInstance($migration)->{$method}(),
        \Migration::RESULT_COMPLETED,
        t('@action of "@migration" completed.', array(
          '@action' => $action,
          '@migration' => $migration,
        ))
      );
    }
  }

  /**
   * Load entity by property.
   *
   * @param string $entity_type
   *   Entity type.
   * @param string $property
   *   Property in entity schema.
   * @param string $value
   *   Expected value of a property.
   *
   * @return \EntityDrupalWrapper|\EntityMetadataWrapper
   *   Entity wrapper.
   *
   * @throws \Exception
   */
  private function getEntityWrapper($entity_type, $property, $value) {
    $entity = entity_load($entity_type, FALSE, array($property => $value));

    if (empty($entity)) {
      throw new \Exception(t('Entity of "@entity_type" cannot be loaded using "@property" property with "@value" value.', array(
        '@entity_type' => $entity_type,
        '@property' => $property,
        '@value' => $value,
      )));
    }

    return entity_metadata_wrapper($entity_type, reset($entity));
  }

}
